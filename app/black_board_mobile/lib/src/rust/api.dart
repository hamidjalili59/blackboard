// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'bridge_models.dart';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `CLIENT_STATE`, `TOKIO_RUNTIME`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `deref`, `initialize`, `initialize`

/// Creates a room and returns its ID. Does not start streaming events.
Future<String> createRoom({
  required String serverAddr,
  required String username,
}) => RustLib.instance.api.crateApiCreateRoom(
  serverAddr: serverAddr,
  username: username,
);

/// Joins an existing room. Does not start streaming events.
Future<void> joinRoom({
  required String serverAddr,
  required String username,
  required String roomId,
}) => RustLib.instance.api.crateApiJoinRoom(
  serverAddr: serverAddr,
  username: username,
  roomId: roomId,
);

/// Starts listening for events on the current connection and streams them to Flutter.
Stream<EventMessage> listenEvents() =>
    RustLib.instance.api.crateApiListenEvents();

Future<void> sendCanvasCommand({
  required String commandJson,
  required PlatformInt64 timestampMs,
}) => RustLib.instance.api.crateApiSendCanvasCommand(
  commandJson: commandJson,
  timestampMs: timestampMs,
);

Future<void> sendAudioChunk({
  required List<int> data,
  required PlatformInt64 sequence,
}) =>
    RustLib.instance.api.crateApiSendAudioChunk(data: data, sequence: sequence);

Future<void> disconnect() => RustLib.instance.api.crateApiDisconnect();
